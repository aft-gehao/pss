<!--
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:p="http://www.springframework.org/schema/p" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
    xmlns:context="http://www.springframework.org/schema/context" xmlns:cache="http://www.springframework.org/schema/cache"
    xsi:schemaLocation="
      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
      http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
      http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.0.xsd
      http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
      http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
      http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-4.0.xsd"
    default-autowire="byName" default-lazy-init="false">
    
    &lt;!&ndash;
                加载时织入，需要web容器的相应支持，tomcat下需要：
        1、配置工程下的/META-INF/context.xml指定加载类，或在tomcat配置文件中进行配置；
        2、把spring-instrument-tomcat-版本号.jar放到tomcat的lib目录下。 
    &ndash;&gt;
   &lt;!&ndash; <context:load-time-weaver aspectj-weaving="autodetect" weaver-class="org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver" />&ndash;&gt;
    
    &lt;!&ndash; Cache，指定mode为aspectj，配合context:load-time-weaver，支持内部及private调用的缓存 &ndash;&gt;
    <cache:annotation-driven cache-manager="cacheManager" mode="proxy" proxy-target-class="true" />
    
    &lt;!&ndash; Config &ndash;&gt;
    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxTotal" value="1024" />
        <property name="maxIdle" value="200" />
        <property name="minIdle" value="0" />
        <property name="maxWaitMillis" value="1000" />
        <property name="minEvictableIdleTimeMillis" value="300000" />
        <property name="numTestsPerEvictionRun" value="200" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />
        <property name="testWhileIdle" value="false" />
        <property name="timeBetweenEvictionRunsMillis" value="60000" />
        <property name="blockWhenExhausted" value="true" />
    </bean>

    &lt;!&ndash; Connection &ndash;&gt;
    <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="hostName" value="127.0.0.1" />
        <property name="port" value="6379" />
        <property name="timeout" value="2000" />
        <property name="database" value="0" />
        <property name="usePool" value="true" />
        <property name="poolConfig" ref="jedisPoolConfig" />
    </bean>

    &lt;!&ndash; Serializer &ndash;&gt;
    <bean id="stringRedisSerializer" class="org.springframework.data.redis.serializer.StringRedisSerializer" />
    <bean id="jdkRedisSerializer" class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
    

    &lt;!&ndash; Templates &ndash;&gt;
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="defaultSerializer" ref="stringRedisSerializer" />
        <property name="valueSerializer" ref="jdkRedisSerializer"/>
        <property name="connectionFactory" ref="jedisConnectionFactory" />
    </bean>

    &lt;!&ndash; redis client &ndash;&gt;
    <bean id="redisClient" class="com.afanti.psi.redis.RedisClient">
        <constructor-arg index="0" ref="redisTemplate" />
    </bean>
    
    &lt;!&ndash; 按string方式序列化的redis client  start &ndash;&gt;
    <bean id="redisStrTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="defaultSerializer" ref="stringRedisSerializer" />
        <property name="valueSerializer" ref="stringRedisSerializer"/>
        <property name="connectionFactory" ref="jedisConnectionFactory" />
    </bean>
    
    
    <bean id="redisStrClient" class="com.afanti.psi.redis.RedisClient">
        <constructor-arg index="0" ref="redisStrTemplate" />
    </bean>
    &lt;!&ndash; 按string方式序列化的redis client  end &ndash;&gt;
    
    <bean id="redisCacheManager" class="org.springframework.data.redis.cache.RedisCacheManager">
        <constructor-arg ref="redisTemplate" />
        <property name="cacheNames">
            <set>
                <value>redis</value>&lt;!&ndash; 数据最终是从redis取得，即使多个cacheName，如果key相同，取出的数据也相同 &ndash;&gt;
            </set>
        </property>
        <property name="transactionAware" value="true"></property>
        <property name="usePrefix" value="true" />
        <property name="cachePrefix">
            <bean class="org.springframework.data.redis.cache.DefaultRedisCachePrefix">
                <constructor-arg value=":" />
            </bean>
        </property>
        <property name="defaultExpiration" value="1800" />&lt;!&ndash;second &ndash;&gt;
        &lt;!&ndash; <property name="expires">
            <map>
                <entry key="imageCache" value="3600" />
            </map>
        </property> &ndash;&gt;
    </bean>
    
    &lt;!&ndash; spring自身提供的简单缓存管理器 &ndash;&gt;
    <bean id="simpleCacheManager" class="org.springframework.cache.support.SimpleCacheManager">
        <property name="caches">
            <set>
                <bean
                    class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean" 
                    p:name="default" />
            </set>
        </property>
    </bean>
    
    <bean id="cacheManager" class="org.springframework.cache.support.CompositeCacheManager">
        <property name="cacheManagers">
            <list>
                <ref bean="simpleCacheManager"/>
                <ref bean="redisCacheManager"/>
            </list>
        </property>
        <property name="fallbackToNoOpCache" value="true"/>
    </bean>
</beans>
-->
